using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using issue_tracker_2.Models;
using System.Data.SqlClient;

namespace issue_tracker_2.Controllers
{
    public class TokensController : Controller
    {

        public IActionResult TokenGenerator()
        {
            if (HttpContext.Session.GetInt32("UserAuthority") <= 1)
            {
                return View();
            }
            else
            {
                return RedirectToAction("PageNotFound", "Home");
            }
        }
        public IActionResult TokenLogin()
        {

            return View();


        }
        public IActionResult Register()
        {
            //if(HttpContext.Session.GetString("TokenRegisterSession"))
            //HttpContext.Session.Remove("TokenRegisterSession");
            return View();
        }


        public IActionResult VerifyToken(Tokeninfo submittedtokeninfo)
        {
            SqlConnection sqlcon = new SqlConnection();

            try
            {
                sqlcon.ConnectionString = "Data Source=.;Initial Catalog='Issue Tracker 1';Integrated Security=True";
                SqlCommand sqlcom = new SqlCommand("");
                sqlcon.Open();
                sqlcom = new SqlCommand("select * from Tokens where Tokenstring='" + submittedtokeninfo.TokenString + "' and Tokenstatus='ACTIVE'", sqlcon);
                SqlDataReader reader = sqlcom.ExecuteReader();
                if (reader.HasRows)
                {
                    reader.Read();
                    string tokentype;
                    tokentype = reader[4].ToString();
                    int tokenid = int.Parse(reader[0].ToString());

                    if (tokentype == "Login Permission")
                    {
                        if (int.Parse(submittedtokeninfo.TokenLinked_info) == int.Parse(reader[3].ToString()))
                        {
                            int userid = int.Parse(reader[3].ToString());
                            reader.Close();
                            sqlcom = new SqlCommand("select username,userauthority from users where userid=" + userid, sqlcon);
                            reader = sqlcom.ExecuteReader();
                            reader.Read();
                            string tempinfo = reader[0].ToString() + "1";
                            string username = reader[0].ToString();
                            int userauthority = int.Parse(reader[1].ToString());
                            TempData["TokenValid"] = "True";
                            TempData["Temppass"] = tempinfo;
                            TempData["Tempusername"] = tempinfo;
                            reader.Close();

                            HttpContext.Session.SetString("TokenSender", submittedtokeninfo.TokenString);

                            SendSystemTokenNotification(userid);
                            DeactivateToken();

                            sqlcom = new SqlCommand("update users set userusername='" + tempinfo + "',userpassword='" + tempinfo + "' where userid=" + userid, sqlcon);
                            sqlcom.ExecuteNonQuery();

                            SetNewSession(userid, username, userauthority);

                            return RedirectToAction("TokenLogin", "Tokens");

                        }
                        else
                        {

                            TempData["TokenValid"] = "False";
                            return RedirectToAction("Tokenlogin", "Tokens");
                        }





                    }
                    else if (tokentype == "New User")
                    {
                        if (submittedtokeninfo.TokenLinked_info == reader[2].ToString())
                        {
                            HttpContext.Session.SetString("Registerstate", "Step1");

                            HttpContext.Session.SetString("TokenSender", submittedtokeninfo.TokenString);
                            //HttpContext.Session.SetString("TokenRegisterSession", "Valid");

                            return RedirectToAction("Register", "Tokens");

                        }
                        else
                        {
                            TempData["TokenValid"] = "False";
                            return RedirectToAction("TokenLogin", "Tokens");
                        }

                    }
                    else //other token types
                    {
                        return RedirectToAction("TokenLogin", "Tokens");

                    }
                }
                else
                {
                    TempData["TokenValid"] = "False";
                    return RedirectToAction("TokenLogin", "Tokens");

                }
            }
            catch
            {
                TempData["TokenValid"] = "False";
                return RedirectToAction("TokenLogin", "Tokens");
            }
            finally
            {
                sqlcon.Close();
            }
        }
        public IActionResult GenerateToken(Tokeninfo Customtoken)
        {
            SqlConnection sqlcon = new SqlConnection("Data Source=.;Initial Catalog='Issue Tracker 1';Integrated Security=True");
            sqlcon.Open();
            SqlCommand sqlcom = new SqlCommand();
            try
            {
                string tokenstring;
                while (1 > 0)
                {
                    tokenstring = GenerateValidToken();
                    sqlcom = new SqlCommand("select * from Tokens where(Tokenstring='" + tokenstring + "')", sqlcon);
                    SqlDataReader reader = sqlcom.ExecuteReader();
                    if (reader.HasRows is false)
                    {
                        reader.Close();
                        sqlcon.Close();
                        break;
                    }
                }
                sqlcon.Open();
                int userid;
                bool isid = int.TryParse(Customtoken.TokenLinked_info, out userid);
                if(isid==true)
                {
                    sqlcom = new SqlCommand("insert into tokens (Tokenstring,Tokenlinkedemail,Tokenlinkedid,Tokentype,Tokencreater,Tokenstatus) values('" + tokenstring + "',NULL," + userid + ",'" + Customtoken.TokenType + "'," + HttpContext.Session.GetInt32("UserID") + ",'ACTIVE')", sqlcon);

                }
                else
                {
                    sqlcom = new SqlCommand("insert into tokens (Tokenstring,Tokenlinkedemail,Tokenlinkedid,Tokentype,Tokencreater,Tokenstatus) values('" + tokenstring + "','" + Customtoken.TokenLinked_info + "'," + Customtoken.TokenLinkedId + ",'" + Customtoken.TokenType + "'," + HttpContext.Session.GetInt32("UserID") + ",'ACTIVE')", sqlcon);

                }
                sqlcom.ExecuteNonQuery();
                TempData["TokenStatus"] = "ACTIVE";
                TempData["TokenString"] = tokenstring;
                return RedirectToAction("TokenGenerator", "Tokens");

            }

            catch
            {
                TempData["TokenStatus"] = "Error";
                return RedirectToAction("TokenGenerator", "Tokens");

            }
            finally
            {
                sqlcon.Close();
            }

        }

        public string GenerateValidToken()
        {
            string result="";
            Random rand = new Random();
            for(int i=0;i<=2;i++)
            {
                int num = rand.Next(1, 10);
                result += num.ToString();
                num = rand.Next(97, 122);
                result += ((char)num).ToString().ToUpper() ;
            }
            
            return result;
        }

        public IActionResult RegisterUserSteps(string step)
        {
            HttpContext.Session.SetString("Registerstate", "Step"+step);
            return RedirectToAction("Register", "Tokens");

        }

        public IActionResult CheckUsernameAvailability(Loggedinuserinfo userinfo)
        {
            SqlConnection sqlcon = new SqlConnection("Data Source=.;Initial Catalog='Issue Tracker 1';Integrated Security=True");
            sqlcon.Open();
            SqlCommand sqlcom = new SqlCommand("select * from users where userusername='" + userinfo.LoggedinUserUsername+"'",sqlcon);
            SqlDataReader reader = sqlcom.ExecuteReader();
            if(reader.HasRows)
            {
                HttpContext.Session.SetString("Registerstate", "Step2");
                TempData["Error"] = "Usernametaken";
                return RedirectToAction("Register", "Tokens");

            }
            else
            {
                HttpContext.Session.SetString("Registerstate", "Step3");
                HttpContext.Session.SetString("Username", userinfo.LoggedinUserUsername);

            }
            reader.Close();
            sqlcon.Close();
            return RedirectToAction("Register", "Tokens");
        }

        public IActionResult CheckPassword(Loggedinuserinfo userinfo)
        {
            HttpContext.Session.SetString("Registerstate", "Step4");
            HttpContext.Session.SetString("Userpass", userinfo.Loggedinuserpass);
            return RedirectToAction("Register", "Tokens");

        }

        public IActionResult CreatAccount(Loggedinuserinfo newaccount)
        {

            SqlConnection sqlcon = new SqlConnection("Data Source=.;Initial Catalog='Issue Tracker 1';Integrated Security=True");
            sqlcon.Open();
            string username = HttpContext.Session.GetString("Username");
            string password = HttpContext.Session.GetString("Userpass");
            username = username[0].ToString().ToUpper() + username.Substring(1, username.Length - 1);
            password = password[0].ToString().ToUpper() + password.Substring(1, password.Length - 1);

            SqlCommand sqlcom = new SqlCommand("insert into users(userusername,userpassword,username,userlastname,useractivestatus,userauthority) values('" + username + "','" + password + "','" + newaccount.LoggedinUserName + "','" + newaccount.LoggedinUserLastname + "','ACTIVE','3')", sqlcon);
            sqlcom.ExecuteNonQuery();
            sqlcom = new SqlCommand("select userid,username from users where userusername='" + username + "'", sqlcon);
            SqlDataReader reader = sqlcom.ExecuteReader();
            reader.Read();
            int newuser_id = int.Parse(reader[0].ToString());
            string userName= reader[1].ToString();
            SendSystemWelcomeMessage(newuser_id, userName);
            DeactivateToken();
            SendSystemTokenNotification(newuser_id);
            SetNewSession(newuser_id, userName, 3);
            return RedirectToAction("MyProfile", "Dashboard");
        }

        public void SetNewSession(int userid,string userName,int Authority)
        {
            HttpContext.Session.Clear();
            HttpContext.Session.SetInt32("UserID", userid);
            HttpContext.Session.SetInt32("UserAuthority", 3);
            HttpContext.Session.SetString("UserName", userName);
        }

        public void DeactivateToken()
        {
            SqlConnection sqlcon = new SqlConnection("Data Source=.;Initial Catalog='Issue Tracker 1';Integrated Security=True");
            sqlcon.Open();
            SqlCommand sqlcom = new SqlCommand("update Tokens set Tokenstatus='USED' where Tokenstring='"+HttpContext.Session.GetString("TokenSender")+"'",sqlcon);
            sqlcom.ExecuteNonQuery();
            sqlcon.Close();
        }
        public void SendSystemWelcomeMessage(int userid,string name)
        {
            SqlConnection sqlcon = new SqlConnection("Data Source=.;Initial Catalog='Issue Tracker 1';Integrated Security=True");
            sqlcon.Open();
            string message = $"Welcome to your dashboard, {name}. Your UserKey is {userid}. If you have any questions about your new account, feel free to contact Administrator using Get Help page.";
            SqlCommand sqlcom = new SqlCommand("insert into messages(messagesender,Messagereceiver,messagetitle,messageinfo,messagestatus,MessageSentdate,messagetype) values(1," + userid + ",'Account Created!','" + message + "','NEW','" + GetDate() + "','SYSTEM')", sqlcon);
            sqlcom.ExecuteNonQuery();
            
        }
        public void SendSystemTokenNotification(int usedby)
        {
            SqlConnection sqlcon = new SqlConnection("Data Source=.;Initial Catalog='Issue Tracker 1';Integrated Security=True");
            sqlcon.Open();
            SqlCommand sqlcom = new SqlCommand("select Tokencreater from Tokens where Tokenstring='" + HttpContext.Session.GetString("TokenSender") + "'", sqlcon);
            SqlDataReader reader = sqlcom.ExecuteReader();
            reader.Read();
            int userid = int.Parse(reader[0].ToString());
            reader.Close();
            string message = $"A token created by you was used. Token String: {HttpContext.Session.GetString("TokenSender")}. UserKey {usedby} used this token. If you didnt authorize this token, deactivate this account.";
            sqlcom = new SqlCommand("insert into messages(messagesender,Messagereceiver,messagetitle,messageinfo,messagestatus,MessageSentdate,messagetype) values(1," + userid + ",'Your Token Was Used','" + message + "','NEW','" + GetDate() + "','SYSTEM')", sqlcon);
            sqlcom.ExecuteNonQuery();
            sqlcon.Close();
        }

        public IActionResult CancelRegistration()
        {

            TempData["RefrenceCopy"] = HttpContext.Session.GetString("TokenSender");
            HttpContext.Session.Clear();
            HttpContext.Session.SetString("Registerstate","Canceled");
            return RedirectToAction("Register", "Tokens");
        }



        public static string GetDate()
        {
            string monthName = "";
            if (DateTime.Now.Month == 1)
            {
                monthName = "Jan";
            }
            if (DateTime.Now.Month == 2)
            {
                monthName = "Feb";
            }
            if (DateTime.Now.Month == 3)
            {
                monthName = "Mar";
            }
            if (DateTime.Now.Month == 4)
            {
                monthName = "Apr";
            }
            if (DateTime.Now.Month == 5)
            {
                monthName = "May";
            }
            if (DateTime.Now.Month == 6)
            {
                monthName = "Jun";
            }
            if (DateTime.Now.Month == 7)
            {
                monthName = "Jul";
            }
            if (DateTime.Now.Month == 8)
            {
                monthName = "Aug";
            }
            if (DateTime.Now.Month == 9)
            {
                monthName = "Sep";
            }
            if (DateTime.Now.Month == 10)
            {
                monthName = "Oct";
            }
            if (DateTime.Now.Month == 11)
            {
                monthName = "Nov";
            }
            if (DateTime.Now.Month == 12)
            {
                monthName = "Dec";
            }
            return monthName + " " + DateTime.Now.Day + " " + DateTime.Now.Year;
        }
    }
}
